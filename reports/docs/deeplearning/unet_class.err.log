Traceback (most recent call last):
  File "C:\anaconda3\envs\abe_website\lib\site-packages\jupyter_cache\executors\utils.py", line 64, in single_nb_execution
    **kwargs,
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\anaconda3\envs\abe_website\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import os
def get_list_of_files(data_path: str=r'\dataset\raster\unet_data') -> list[tuple[str, str]]:
    '''Returns a list of tuples of the form (path_to_input_sample, path_to_label)
    
    Parameters:
    data_path (str): path to the root of the data directory
    
    Returns:
    list[tuple[str, str]]: List of file paths with corresponding ground truth labels
    '''
    
    # get list of patch ids. list comprehension pretty much says "look at the 
    # items in the data_path directory and if they are directories, add them to 
    # the list"
    file_paths = []
    patch_ids = [sub_dir for sub_dir in os.listdir(data_path) if os.path.isdir(os.path.join(data_path, sub_dir))]
    
    for patch in patch_ids:
        # get all subsamples of each patch
        subsamples = os.listdir(os.path.join(data_path, patch, 'input'))
        # add subsamples to file_path list
        file_paths.extend(
            (
                os.path.join(data_path, patch, 'input', subsample),
                os.path.join(data_path, patch, 'target', subsample)
            ) for subsample in subsamples
        )
        
    
    # check to make sure files exist
    for file_path in file_paths:
        if not os.path.isfile(file_path[0]): # if source file doesn't exist
            raise FileNotFoundError(f'Input file {file_path[0]} not found')
        if not os.path.isfile(file_path[1]): # if label file doesn't exist
            raise FileNotFoundError(f'Label file {file_path[1]} not found')
    
    return file_paths
    
    
file_paths = get_list_of_files(r'D:\jupyterbooks\gcersat\dataset\raster\unet_data')
print(f'Found {len(file_paths)} files') # always a good idea to print out the number of files found
print(file_paths[0]) # take a look at the first file path input/target 2-tupledataset/raster/unet_data
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mTypeError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_30652\1356497114.py[0m in [0;36m<module>[1;34m[0m
[0;32m      1[0m [1;32mimport[0m [0mos[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 2[1;33m [1;32mdef[0m [0mget_list_of_files[0m[1;33m([0m[0mdata_path[0m[1;33m:[0m [0mstr[0m[1;33m=[0m[1;34mr'\dataset\raster\unet_data'[0m[1;33m)[0m [1;33m->[0m [0mlist[0m[1;33m[[0m[0mtuple[0m[1;33m[[0m[0mstr[0m[1;33m,[0m [0mstr[0m[1;33m][0m[1;33m][0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      3[0m     '''Returns a list of tuples of the form (path_to_input_sample, path_to_label)
[0;32m      4[0m [1;33m[0m[0m
[0;32m      5[0m     [0mParameters[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mTypeError[0m: 'type' object is not subscriptable
TypeError: 'type' object is not subscriptable

